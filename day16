# 函数
/*
区别：
存储过程： 可以有0个返回，也可以有多个返回，适合批量插入批量更新
函数： 有且仅有一个返回，适合做处理数据后返回一个结果
*/

# 一、 创建语法
CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型
BEGIN
	函数体
END
/*
注意： 
1 参数列表 包含两部分
  参数名 参数类型
2 函数体： 肯定会有return语句，如果没有肯定会报错
  如果return语句没有放在函数体的最后也不报错，但是不建议

  return 值
3 函数体中仅有一句话，则可以省略begin end
4 使用delimiter语句设置结束标记


*/

# 二、 调用语句
SELECT 函数名(参数列表)

# 案例演示

# 1 无参有返回的
# 案例：返回公司的员工数
delimiter $
create function myf1() returns int
begin
	declare c int default 0; # 定义变量
	select count(*) into c # 赋值
	from employees;
	return c;
end $

select myf1();

# 2 有参有返回的
# 案例：根据员工名，返回他的工资
delimiter $
create function myf2(empName varchar(20)) returns double
begin
	set @sal = 0; # 定义了一个用户变量
	select salary into @sal
	from employees
	where last_name = empName;
	
	return @sal;
end $
select myf2('kochhar');

# 案例：根据部门名，返回部门的平均工资
delimiter $
create function myf3(deptName varchar(20)) returns double
begin 
	declare sal double;
	select avg(salary) into sal
	from employees e
	join departments d on e.department_id = d.department_id
	where d.department_name = deptName;
	return sal;
end $
select myf3('IT');

# 三、 查看函数
show create function myf3;

# 四、 删除函数
drop function myf3;

# 案例
# 一、 创建函数。实现传入两个float 返回二者之和
delimiter $
create function test_fun1(num1 float, num2 float) returns float
begin
	declare sum float default 0;
	set sum = num1 + num2;
	return sum;
end $
select test_fun1(1,2);


# 流程控制结构
/*

顺序结构： 程序从上往下依次执行
分支结构： 程序从两条或多条路径中选择一条去执行
循环结构： 程序在满足一定条件的基础上，重复执行一段代码
*/

# 一、 分支结构
# 1 if 函数
/*功能： 实现简单的双分支
语法：
select if(表达式1，表达式2，表达式3)
执行顺序：
如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值

应用：任何地方

*/

# 2 case结构
情况1： 类似于java 的switch语句，一般用于实现的等值判断

语法：
	case 变量|表达式|字段
	when 要判断的值 then 返回的值1或语句1;
	WHEN 要判断的值 THEN 返回的值2或语句2;
	...
	else 要返回的值n或语句n;
	end case;
	
	
情况2： 类似于java 的多重if语句，一般用于实现区间判断
语法：
	CASE 变量|表达式|字段
	WHEN 要判断的条件1 THEN 返回的值1或语句1;
	WHEN 要判断的条件2 THEN 返回的值2或语句2;
	...
	ELSE 要返回的值n或语句n;
	END case;

特点：
1
可以作为表达式，嵌套在其他语句使用，可以放在任何地方，begin end 中或begin end 的外面
可以作为独立的语句去使用，只能放在begin end中
2
如果when中的值或条件成立，则执行对应的then后面的语句，并且结束case
如果都不满足，则执行else中的语句或值
3
else可以省略，如果else省略了，并且所有when条件都不满足 则返回null
 
 
# 案例
# 创建存储过程，根据传入的成绩，来显示等级，比如传入的成绩 90 - 100 A 80 - 90 B 60 - 80 C 否则D
delimiter $
create procedure test_case(in score int)
begin
	case 
	when score >= 90 and score <= 100 then select 'A';
	when score >= 80 then select 'B';
	when score >= 60 then select 'C';
	else select 'D';
	end case;
end $
call test_case(45);

# 3 if结构
/*
功能： 实现多重分支
语法：
if 条件1 then 语句1
else if 条件2 then 语句2
[else 语句n]
end if

应用场合：应用在begin end中

*/

# 案例1： 根据传入的成绩，来显示等级，比如传入的成绩 90 - 100 返回A 80 - 90 返回B 60 - 80 C 否则返回D

delimiter $
create function test_if(score int) returns char
begin 
	if score >= 90 and score <= 100 then return 'A';
	elseif score >= 80 then return 'B';
	elseif score >= 60 then return 'C';
	end if;
end $

select test_if(86);

# 二、 循环结构
/*
分类： 
while、loop、repeat
循环控制：
iterate类似于continue，继续，结束本次循环，继续下一次
leave 类似于 break，跳出，结束当前所在的循环

*/

# 1. while
/*
语法：
[标签]：while 循环条件 do
	循环体;
end while [标签];
*/

# 2. loop
/*
语法：
[标签：] loop
         循环体;
 end loop [标签];
 可以用来模拟简单的死循环
*/

# 3. repeat
/*
语法：
[标签: ] repeat
	循环体
until 结束循环的条件
end repeat [标签];
*/

# 案例： 批量插入，根据次数插入到admin表中多条记录
delimiter $
create procedure pro_while1(in insertCount int)
begin
	declare i int default 1;
	while i <= insertCount do
		insert into admin(username,`password`) values(concat('rose', i),'666');
		set i = i + 1;
	end while;
end $
	
drop procedure pro_while1;
call pro_while1(100);
select * from admin;

# 案例： 添加leave语句 根据次数插入到admin表中多条记录 如果次数大于20 则停止
truncate table admin
drop procedure pro_while1
delimiter $
create procedure pro_while1(in insertCount int)
begin
	declare i int default 1;
	a : while i <= insertCount do
		insert into admin(username,`password`) VALUES(CONCAT('xiaohua', i),'6111');
		if i >= 20 then leave a;
		end if;
		set i = i + 1;
	end while a;
end $

call pro_while1(100);

# 3 添加iterate语句
# 案例： 根据次数插入到admin表中多条记录 只插入偶数次
DELIMITER $
CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
	DECLARE i INT DEFAULT 0;
	a : WHILE i <= insertCount DO
		SET i = i + 1;
		if mod(i,2) != 0 then iterate a;
		end if;
		INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua', i),'6111');
		
		
	END WHILE a;
END $
call pro_while1(100);
select * from admin;


/* # 一、已知表stringcontent
其中字段
id 自增长
content varchar(20)
向该表插入指定个数的，随机的字符串
*/
create table stringcontent(
	id int primary key auto_increment,
	content varchar(20)
);
delimiter $
create procedure test_randstr_insert(in insertCount int) 
begin 
	declare i int default 1; # 定义循环变量i，表示插入的次数
	declare str varchar(26) default 'abcdefghijklmnopqrstuvwxyz';
	declare startIndex int default 1; #代表起始suoyin
	declare len int default 1; #代表截取的字符的长度
	while i <= insertCount do
		set len = floor(rand() * (20 - startIndex + 1) + 1);# 产生一个随机的整数，代表截取长度, 1-（26-startIndex + 1）
		set startIndex = floor(Rand()*26 + 1);#产生一个随机数, 代表起始索引1-26
		insert into stringcontent(content) values(substr(str,startIndex,len));
		set i = i + 1; #循环变量更新
	end while;
end $

call test_randstr_insert(10);

select * from stringcontent;
	
	
