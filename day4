# 进阶6
/*
含义： 又称为多表查询，当查询的字段来自于多个表时，就会用到连接查询
笛卡尔乘积现象： 表1 有m行，表2有n行 结果=m * n行
发生原因：没有有效的连接
如何避免：添加有效的连接条件

分类：  
       按年代分类
       sql92标准
       sql99标准[推荐]
       按功能分类
                 内连接： 
                      等值连接
                      非等值连接
                      自连接
                 外连接
                      左外连接
                      右外连接
                      全外连接
                      
                 交叉连接
                  
*/
SELECT * FROM beauty;
SELECT * FROM boys;

SELECT NAME, boyName FROM boys, beauty
WHERE beauty.`boyfriend_id` = boys.`id`;

# 一： sql92标准
# 1. 等值连接
/*
多表等值连接的结果为多表的交集部分
n表连接至少要n-1个连接条件
多表的顺序没有要求
一般需要为表取别名
可以搭配前面介绍的所有句子使用，比如分组、排序、筛选
*/
# 案例1 查询女神名和对应的男神名
SELECT NAME, boyname
FROM boys,beauty
WHERE beauty.`boyfriend_id` = boys.`id`;

# 案例2 查询员工名和对应的部门名
SELECT last_name, department_name
FROM employees, departments
WHERE employees.`department_id`=departments.`department_id`;

# 2. 为表起别名
/*
提高语句的简洁度
区分多个重名的字段

注意： 如果为表起了别名，则查询的字段就不能使用原来的表名了
*/
# 查询员工名、工种号、工种名
SELECT e.`last_name`, e.`job_id`,j.`job_title`
FROM employees AS e, jobs AS j
WHERE e.`job_id` = j.`job_id`;

# 3. 两个表的顺序是否可以调换
# 查询员工名、工种号、工种名
SELECT j.`job_title`, e.`last_name`, e.`job_id`
FROM  jobs AS j, employees AS e
WHERE j.`job_id` = e.`job_id` ;

# 4. 可以加筛选
#案例1： 查询有奖金的员工名和部门名
SELECT last_name, department_name, commission_pct
FROM employees e, departments d
WHERE e.`department_id` = d.`department_id`
AND e.`commission_pct` IS NOT NULL;
#案例2： 查询城市名中第二个字母为o的对应的部门名和城市名
SELECT department_name, city
FROM departments d, locations l
WHERE d.`location_id` = l.`location_id`
AND city LIKE '%_o%';

# 5 可以加分组
#案例1 查询每个城市的部门个数
SELECT COUNT(*) 个数, city
FROM departments d, locations l
WHERE d.`location_id` = l.`location_id`
GROUP BY city;
#案例2 查询有奖金的每个部门名和部门的领导编号和该部门的最低工资
SELECT department_name, d.`manager_id`, MIN(salary)
FROM departments d, employees e
WHERE d.`department_id` = e.`department_id`
AND commission_pct IS NOT NULL
GROUP BY department_name, manager_id;

# 6 加排序
# 案例： 查询每个工种的工种名和员工的个数，并且按员工个数降序
SELECT job_title, COUNT(*)
FROM employees e, jobs j
WHERE e.`job_id` = j.`job_id`
GROUP BY job_title
ORDER BY COUNT(*) DESC;

# 7 三表连接
# 案例： 查询员工名、部门名和所在的城市
SELECT last_name, department_name, city
FROM employees e, departments d, locations l
WHERE e.`department_id` = d.`department_id`
AND d.`location_id` = l.`location_id`
AND city LIKE 's%'
ORDER BY department_name DESC;

#2 非等值连接
# 案例1 查询员工的工资和工资级别
SELECT salary, grade_level
FROM employees e, job_grades g
WHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`;
SELECT * FROM job_grades;

/*
create table job_grades
(grade_level varchar(3),
lowest_sal int,
highest_sal int);
insert into job_grades
values ('A', 1000, 2999);

INSERT INTO job_grades
VALUEs ('B', 3000, 5999);

INSERT INTO job_grades
VALUEs ('C', 6000, 9999);

INSERT INTO job_grades
VALUEs ('D', 10000, 14999);

INSERT INTO job_grades
VALUEs ('E', 15000, 24999);

INSERT INTO job_grades
VALUEs ('F', 25000, 40000);
*/

# 3 自连接
# 案例： 查询 员工名和上级的名称
SELECT e.`employee_id`, e.`last_name`, m.`employee_id`, m.`last_name`
FROM employees e, employees m
WHERE e.`manager_id` = m.`employee_id`;

# 练习题 
# 一 显示员工的最大工资，工资平均值
SELECT MAX(salary),AVG(salary)
FROM employees;

# 二 查询员工表的employee_id, job_id, last_name, 按department_id降序，salary升序
SELECT employee_id, job_id, last_name
FROM employees
ORDER BY department_id DESC, salary ASC;

# 三 查询员工表的job_id中包含a和e的，并且a在e之前
SELECT job_id 
FROM employees
WHERE job_id LIKE '%a%e%';
# 四 已知表student, 里面有id（学号），name gradeId（年级编号，
#    已知表grade，里面有id（年级编号），name（年级名）
#    已知表result，里面有id，score，studentNo（学号）
#    要求 查询姓名、年级名、成绩
SELECT s.name, g.name, r.score
FROM student s, grade g, result r
WHERE s.id = r.studentNo
AND g.id = s.gradeId

# 五 显示当前日期，以及去前后空格，截取子字符串的函数
SELECT NOW();
SELECT TRIM(字符 FROM '');
SELECT SUBSTR(str,startIndex);
SELECT SUBSTR(str,startIndex);

# 二、 sql99 语法

/*
语法： 
      select 查询列表
      from 表1 别名 【连接类型】
      join 表2 别名
      on 连接条件
      where 筛选条件
      
      
内连接（重要） inner
外连接
       左外    left [outer]
       右外    right [outer]
       全外    full [outer]
       
交叉连接  cross
*/

# 一 内连接
/*
语法
select 查询列表
from 表1 别名
inner join 表2 别名
on 连接条件

分类：
等值
非等值
自连接

*/

# 1、 等值连接
# 案例1 查询员工名、部门名
SELECT last_name,department_name
FROM employees e
INNER JOIN departments d
ON e.`department_id` = d.`department_id`;

# 案例2 查询名字中包含e的员工名和工种名
SELECT last_name, job_title
FROM employees e
INNER JOIN jobs j
ON j.`job_id` = e.`job_id`
WHERE e.`last_name` LIKE '%e%';

# 案例3 查询部门个数>3的城市名和部门个数（添加分组和筛选）
SELECT city, COUNT(*) 部门个数
FROM departments d
INNER JOIN locations l
ON d.`location_id` = l.`location_id`
GROUP BY city
HAVING COUNT(*) > 3;

# 案例4 查询哪个部门的员工个数>3的部门名和员工个数，并且按个数升序
# 第一步 查询每个部门的员工个数
SELECT COUNT(*), department_id
FROM employees e
GROUP BY department_id;

# 第二步 在第一步的结果上筛选员工个数>3的记录，并排序
SELECT COUNT(*), department_name 
FROM employees e
INNER JOIN departments d
ON e.`department_id` = d.`department_id`
GROUP BY department_name
HAVING COUNT(*)>3
ORDER BY COUNT(*) DESC;


# 5 查询员工名 部门名 工种名 并且按照部门名降序
SELECT last_name, department_name, job_title
FROM employees e
INNER JOIN departments d ON e.`department_id` = d.`department_id`
INNER JOIN jobs j ON e.`job_id` = j.`job_id`
ORDER BY department_name DESC;

# 二、非等值连接

# 查询员工的工资级别
SELECT salary, grade_level
FROM employees e
INNER JOIN job_grades g
ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;

# 查询每个工资级别的个数>20的个数，并且按工资级别降序
SELECT COUNT(*) salary, grade_level
FROM employees e
INNER JOIN job_grades g
ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`
GROUP BY grade_level
HAVING COUNT(*) > 20;

# 三、 自连接
# 查询员工的名字、上级的名字
SELECT e.`last_name`, m.`last_name`
FROM employees e
JOIN employees m
ON e.`manager_id` = m.`employee_id`;


# 外连接
/*
应用场景：用于查询一个表中有，另一个表没有的记录
特点：
1 外连接的查询结果为主表中的所有记录
      如果从表中有和它匹配的，则显示匹配的值
      如果从表中没有和它匹配的，则显示为null
      外连接查询结果等于内连接结果+主表中有而从表中没有的记录
      
2 左外连接，left join左边的表是主表
  右外连接，right join右边的表是主表
  
3 左外和右外交换两个表的顺序，可以实现同样的效果

4 全外连接 = 内连接的结果+表一中有但是表二没有+表二有但是表一没有的
*/

#引入：查询男朋友不在男神表的女神名
USE girls;
SELECT * FROM beauty;
SELECT * FROM boys;
# 左外连接
SELECT b.name, bo.*
FROM beauty b
LEFT OUTER JOIN boys bo
ON b.`boyfriend_id` = bo.`id`
WHERE bo.`id` IS NULL;
# 右外连接
SELECT b.name, bo.*
FROM boys bo
RIGHT OUTER JOIN beauty b
ON b.`boyfriend_id` = bo.`id`
WHERE bo.`id` IS NULL;

# 案例1 查询哪个部门没有员工
# 左外
SELECT d.*, e.`employee_id`
FROM departments d
LEFT OUTER JOIN employees e
ON d.`department_id` = e.`department_id`
WHERE e.`employee_id` IS NULL;

# 右外
SELECT d.*, e.`employee_id`
FROM employees e
RIGHT OUTER JOIN departments d
ON d.`department_id` = e.`department_id`
WHERE e.`employee_id` IS NULL;

# 全外
USE girls;

# 交叉连接
SELECT b.*,bo.*
FROM beauty b
CROSS JOIN boys bo;

# sql92 vs sql99
功能：sql99支持的功能较多

# 案例讲解  多表连接
# 一、查询编号>3的女神的男朋友信息，如果有则列出详细，如果没有则用null填充
SELECT b.id, b.name, bo.*
FROM beauty b
LEFT OUTER JOIN boys bo
ON b.boyfriend_id = bo.id
WHERE b.id > 3;
# 二、查询哪个城市没有部门
SELECT city, d.*
FROM departments d
RIGHT OUTER JOIN locations l
ON d.`location_id` = l.`location_id`
WHERE d.`department_id` IS NULL
# 三、查询部门名为sal或it的员工信息
SELECT e.*, d.`department_id`
FROM departments d
LEFT JOIN employees e
ON d.`department_id` = e.department_id
WHERE d.`department_name` IN('SAL','IT');



